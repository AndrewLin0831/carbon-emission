<!DOCTYPE html>
<script
src="https://code.jquery.com/jquery-3.6.0.min.js"
integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="
crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.7.2/dist/Chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@0.7.0"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-piechart-outlabels "></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://getbootstrap.com/docs/5.3/assets/css/docs.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/web3@1.5.3/dist/web3.min.js"></script> 
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blockchain Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; }
        
        .body { display: flex; flex-direction: column; margin-bottom: 20px; }
        .body div { flex-basis: 45%; }
        .select-container {
            text-align: center;
            margin-bottom: 10px;
        }
        table { width: 100%; /* 可以根據需要調整為更大的固定值 */
                min-width: 550px; /* 確保表格有足夠寬度展示内容 */
                border-collapse: collapse;
        }
        th, td { border: 1px solid #ddd; padding: 8px; text-align: left;font-size:16px;}
        th { background-color: #d5f79b; }
        .table-container {
            overflow-x: auto; /* 啟用水平滾動條 */
            height: 225px;
            overflow-y: scroll;
            border: 1px solid #ccc; /* 添加邊框，可視需要修改 */
            width: 800px;
            height: 280px;
            margin: 0 auto;
        }
    </style>
  </head>
  <body>
    <div class="header">
      <% include menu.ejs %>
    </div>
    <div class="body">
        <div class="private">
            <h1>Private Blockchain Events</h1>
            <div style="text-align: center;">
                <label for="privateSelect">Select Event</label>
                <select id="privateSelect">
                    <option disabled selected>--Option--</option>
                    <option value="Block">Blockchain History</option>
                    <!--<option value="Mint">Certificate Mint Event</option>-->
                    <option value="Burn">Certificate Burn Event</option>
                    <option value="VerifyComplete">Emission Verification Event</option>
                </select>
            </div>
            <div class="table-container">
                <table id="privateTable">
                    <tr>
                        <th>Event Name</th>
                        <th>logs</th>
                    </tr>
                    <tr>
                        <td>Burn Event</td>
                        <td>...</td>
                    </tr>
                    <tr>
                        <td>Burn Event</td>
                        <td>...</td>
                    </tr>
                </table>
            </div>
        </div>
        <div class="public" >
            <h1>Public Blockchain Events</h1>
            <div style="text-align: center;">
                <label for="publicSelect">Select Event</label>
                <select id="publicSelect">
                    <option disabled selected>--Option--</option>
                    <option disabled>----iMRC NFT----</option>
                    <option value="BuyerNFTMint">Buyer NFT Minted Events</option>
                    <option value="BuyerNFTUpdated">Buyer NFT Updated Data Events</option>
                    <option value="BuyerNFTStatus">Buyer NFT Verified Events</option>
                    <option disabled>----Carbon NFT----</option>
                    <option value="SellerNFTMint">Seller NFT Minted Events</option>
                    <option value="SellerNFTUpdated">Seller NFT Updated Data Events</option>
                    <option value="SellerNFTStatus">Seller NFT Verified Events</option>
                    <option disabled>----Market----</option>
                    <option value="NewDemand">New Demand Events</option>
                    <option value="NewSupply">New Supply Events</option>
                    <option value="NewMatching">Carbon Trading Events</option>
                    <option value="PaymentReceived">Complete Payment Events</option>
                </select>
            </div>
            <div class="table-container">
                <table id="publicTable">
                    <tr>
                        <th>Event Name</th>
                        <th>logs</th>
                    </tr>
                    <tr>
                        <td>Burn Event</td>
                        <td>...</td>
                    </tr>
                    <tr>
                        <td>Burn Event</td>
                        <td>...</td>
                    </tr>
                </table>
            </div>
        </div>
    </div>
  </body>
</html>
<script>
  var web3 ='';
if (window.ethereum) {
  web3 = new Web3(window.ethereum);
  window.ethereum.enable(); // get permission to access accounts
  } 
</script>
<script>
  // API call for Private Blockchain Events
  $('#privateSelect').change(function() {
      var eventId = $(this).val();
      if (eventId!='Block') {
          $.ajax({
              url: 'http://140.116.234.100:1314/Event/getEventLogs?EventID=' + eventId,
              type: 'GET',
              success: function(response) {
                var rows = '<tr><th>Event Name</th><th>logs</th></tr>';
                  if(response==false){
                    rows += '<tr><td>' + "No Event" + '</td><td>' + "No Event" + '</td></tr>';
                  }
                  else{
                  // Assuming the response is an array of events                  
                  /*response.forEach(function(event) {
                      rows += '<tr><td>' + event.Event + '</td><td>' + event.Payload + '</td></tr>';
                  });*/
                  response = response.split('\n');
                  response.splice(-1);
                  response.forEach(function(event) {
                    if(event!=undefined){
                      event = event.split("Payload:");
                      event = JSON.parse(event[1]);
                      console.log(event)
                      rows += '<tr><td>' + eventId + '</td><td>' +'Company ID: '+event.Company + '\n, Start Date: '+event.StartDate +'\n, End Date: '+event.EndDate + '</td></tr>';
                    }
                  });
                  }
                  $('#privateTable').html(rows);
              },
              error: function() {
                  alert('Error fetching data.');
              }
          });
      }
      else{
        $.ajax({
              url: 'http://140.116.234.100:1314/Event/getEventLogs?EventID=block',
              type: 'GET',
              success: function(response) {
                var rows = '<tr><th>Block Number</th><th>Previous Hash</th><th>Current Hash</th></tr>';
                  if(response==false){
                    rows += '<tr><td>' + "No Event" + '</td><td>' + "No Event" + '</td><td>' + "No Event" + '</td></tr>';
                  }
                  else{
                  // Assuming the response is an array of events                  
                  /*response.forEach(function(event) {
                      rows += '<tr><td>' + event.Event + '</td><td>' + event.Payload + '</td></tr>';
                  });*/
                  response = response.split('\n');
                  response.splice(-1);
                  response.forEach(function(event) {
                    if(event!=undefined){
                      event = event.split(",");
                      event[0] = event[0].split("blockNumber:")[1];
                      event[1] = event[1].split("previousHash:")[1];
                      event[2] = event[2].split("currentHash:")[1];
                      rows += '<tr><td>' + event[0] + '</td><td>'+event[1] +'\n</td><td>'+event[2] +'\n</td></tr>';
                    }
                  });
                  }
                  $('#privateTable').html(rows);
              },
              error: function() {
                  alert('Error fetching data.');
              }
          });
      }
  });

  // API call for Public Blockchain Events
  $('#publicSelect').change(function() {
      var eventId = $(this).val();
      if(eventId=='NewMatching'){
          $.ajax({
              url: 'http://140.116.234.100:1314/Event/getEventLogs?EventID=' + eventId,
              type: 'GET',
              success: function(response) {
                  var rows = '<tr><th>Event Name</th><th>TradingVolumes(tCO2e)</th><th>Price(MATIC)</th><th>Demander</th><th>Supplier</th><th>TransactionHash</th></tr>';
                  //var rows = '<tr><th>Event Name</th><th>TradingVolumes(tCO2e)</th><th>Price(MATIC)</th><th>Demander</th><th>Supplier</th></tr>';
                  if(response==false){
                    rows += '<tr><td>' + "No Event" + '</td><td>' + "No Event" + '</td></tr>';
                  }
                  else{
                    response = response.split('\n');
                    response.splice(-1);  
                    response.forEach(function(event) {
                        event = event.split("Payload:")[1];
                        var dataJson = JSON.parse(event);
                        var buyer = dataJson.returnValues.buyer;
                        var seller = dataJson.returnValues.seller;
                        var amount = dataJson.returnValues.amount;
                        var finalPrice = dataJson.returnValues.FinalPrice;
                        var transactionHash = dataJson.transactionHash;
                        rows += '<tr><td>' + eventId + '</td><td>' + (amount/(10**18)).toFixed(3) + '</td><td>' + (finalPrice/(10**18)).toFixed(5)+ '</td><td>' + buyer+ '</td><td>' + seller+ '</td><td>' + transactionHash+ '</td></tr>';
                    });
                  }
                  $('#publicTable').html(rows);
              },
              error: function() {
                  alert('Error fetching data.');
              }
          });
      }
      else if(eventId=='NewDemand'){
        $.ajax({
              url: 'http://140.116.234.100:1314/Event/getEventLogs?EventID=' + eventId,
              type: 'GET',
              success: function(response) {
                  var rows = '<tr><th>Event Name</th><th>Demander</th><th>Volumes(tCO2e)</th><th>TransactionHash</th></tr>';
                  if(response==false){
                    rows += '<tr><td>' + "No Event" + '</td><td>' + "No Event" + '</td></tr>';
                  }
                  else{
                    response = response.split('\n');
                    response.splice(-1);  
                    response.forEach(function(event) {
                        event = event.split("Payload:")[1];
                        var dataJson = JSON.parse(event);
                        var sender = dataJson.returnValues.sender;
                        var amount = dataJson.returnValues.amount;
                        var transactionHash = dataJson.transactionHash;
                        rows += '<tr><td>' + eventId + '</td><td>' + sender + '</td><td>' + (amount/(10**18)).toFixed(3)+ '</td><td>' + transactionHash+ '</td></tr>';
                    });
                  }
                  $('#publicTable').html(rows);
              },
              error: function() {
                  alert('Error fetching data.');
              }
          });
      }
      else{
        if (eventId) {
          $.ajax({
              url: 'http://140.116.234.100:1314/Event/getEventLogs?EventID=' + eventId,
              type: 'GET',
              success: function(response) {
                  var rows = '<tr><th>Event Name</th><th>logs</th></tr>';
                  if(response==false){
                    rows += '<tr><td>' + "No Event" + '</td><td>' + "No Event" + '</td></tr>';
                  }
                  else{
                    response = response.split('\n');
                  response.splice(-1);  
                  response.forEach(function(event) {
                        event = event.split("Payload:")[1];
                      rows += '<tr><td>' + eventId + '</td><td>' + event + '</td></tr>';
                  });
                  }
                  $('#publicTable').html(rows);
              },
              error: function() {
                  alert('Error fetching data.');
              }
          });
      }
      }
  });
</script>
