<!DOCTYPE html>
<script
src="https://code.jquery.com/jquery-3.6.0.min.js"
integrity="sha256-/xUj+3OJU5yExlq6GSYGSHk7tPXikynS7ogEvDej/m4="
crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@2.7.2/dist/Chart.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels@0.7.0"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-plugin-piechart-outlabels "></script>
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
<link href="https://getbootstrap.com/docs/5.3/assets/css/docs.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/web3@1.5.3/dist/web3.min.js"></script> 
<html>
  <head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Blockchain Dashboard</title>
    <style>
        body { font-family: Arial, sans-serif; }
        .body { display: flex; justify-content: left; margin-bottom: 20px; margin-top: 10px;height:auto;background-color: rgb(255, 247, 237);}
        .left_body {background-color: white; flex-basis: 20%}
        .right_body { flex-basis: 80%;}
        table { width: 100%; border-collapse: collapse; justify-content: center;}
        th, td { border: 1px solid #ddd; padding: 8px; }
        th { background-color: #f2f2f2; }
        .table-container {
            overflow-x: auto; /* 啟用水平滾動條 */
            border: 3px solid #252323; /* 添加邊框，可視需要修改 */
            width: 700px;
            justify-content: center;
        }
        .table-container-2{
            overflow-x: auto; /* 啟用水平滾動條 */
            border: 3px solid #252323; /* 添加邊框，可視需要修改 */
            width: 480px;
            justify-content: center;
        }
        .space{
          width: 10px;
          height: 10px;
        }
    </style>
  </head>
  <body>
    <div class="header">
      <% include menu.ejs %>
    </div>
    <div class="body">
      <!-- <div class="left_body"> -->
        <!-- <div class="btn-group-vertical" role="group" aria-label="Vertical radio toggle button group">
            <input type="radio" class="btn-check" name="vbtn-radio" id="vbtn-radio1" autocomplete="off" checked>
            <label class="btn btn-outline-danger" for="vbtn-radio1" style="--bs-border-width: 0px;" onclick="changePage('Monitor','List,Payment');Refresh();">Carbon Market Tracking</label>
            <input type="radio" class="btn-check" name="vbtn-radio" id="vbtn-radio2" autocomplete="off">
            <label class="btn btn-outline-danger" for="vbtn-radio2"style="--bs-border-width: 0px;"onclick="changePage('List','Monitor,Payment');getYourNFT();">List Carbon NFT (Buyer Certificate)</label>
            <input type="radio" class="btn-check" name="vbtn-radio" id="vbtn-radio3" autocomplete="off">
            <label class="btn btn-outline-danger" for="vbtn-radio3"style="--bs-border-width: 0px;"onclick="changePage('Payment','Monitor,List');Remaining();">Matching Payment</label> -->
            <!--
            <input type="radio" class="btn-check" name="vbtn-radio" id="vbtn-radio4" autocomplete="off">
            <label class="btn btn-outline-danger" for="vbtn-radio4"style="--bs-border-width: 0px;"onclick="changePage('List','Monitor');">Emission Information Inquiry</label>
            <input type="radio" class="btn-check" name="vbtn-radio" id="vbtn-radio5" autocomplete="off">
            <label class="btn btn-outline-danger" for="vbtn-radio5"style="--bs-border-width: 0px;"onclick="changePage('List','Monitor');">Add On-site Check Emission</label>
            <input type="radio" class="btn-check" name="vbtn-radio" id="vbtn-radio6" autocomplete="off">
            <label class="btn btn-outline-danger" for="vbtn-radio6"style="--bs-border-width: 0px;"onclick="changePage('List','Monitor');">Certificate transfer to Market</label>
            -->
        <!-- </div> -->
      <!-- </div> -->
      <div class="dropdown">
        <button class="btn btn-outline-danger dropdown-toggle" type="button" id="dropdownMenuButton" data-bs-toggle="dropdown" aria-expanded="false">
          Trading Option
        </button>
        <ul class="dropdown-menu" aria-labelledby="dropdownMenuButton">
          <li>
            <a class="dropdown-item" href="#" onclick="changePage('Monitor','List,Payment');Refresh();">
              Carbon Market Tracking
            </a>
          </li>
          <li>
            <a class="dropdown-item" href="#" onclick="changePage('List','Monitor,Payment');getYourNFT();">
              List Carbon NFT (Buyer Certificate)
            </a>
          </li>
          <li>
            <a class="dropdown-item" href="#" onclick="changePage('Payment','Monitor,List');Remaining();">
              Matching Payment
            </a>
          </li>
        </ul>
      </div>
      
      <div class="right_body" style="margin-right: 10px;margin-left: 10px;">
        <div id="Monitor">
          <h2 style="text-align: center;">Carbon Market Tracking</h2>
          <!-- <div class="text-center">
            <button id="Refresh" class="btn btn-primary" type="button" onclick="Refresh();">Refresh</button>
          </div>
          <div class="space"></div>
          <div class="text-center">
            <button id="Matching" class="btn btn-primary" type="button" onclick="Matching();">Matching (Managers Only, otherwise will lose your money.)</button>
          </div> -->
          <div class="text-center">
            <div class="btn-group" role="group">
              <button id="Refresh" class="btn btn-primary" type="button" onclick="Refresh();">Refresh</button>
              <div class="space"></div>
              <button id="Matching" class="btn btn-primary" type="button" onclick="Matching();">
                Matching (Managers Only, otherwise will lose your money.)
              </button>
            </div>
          </div>
          
          
          <div class="space"></div>
          <div style="display: flex;justify-content: center;">
            <div id="Demand" style="display: none;">
              <h3 style="text-align: center;">Demand List</h2>
              <div id="TrackingDemandTableContainer" style="margin-top: 5px;" class="table-container-2"></div>
            </div>
            <div class="space"></div>
            <div id="Supply" style="display: none;">
              <h3 style="text-align: center;">Supply List</h2>
              <div id="TrackingSupplyTableContainer" style="margin-top: 5px;display: none;" class="table-container-2"></div>
            </div>
          </div> 
        </div>
        <div id="List" style="display: none;">
          <h2 style="text-align: center;">List Carbon NFT</h2>
          <!-- <div class="row g-2">
            <div id="List-TokenID" class="form-floating mb-3 col-sm">
                <input type="TokenID" class="form-control" id="List_TokenID" placeholder="name@example.com">
                <label for="List_TokenID">Token ID</label>
            </div>
            <div id="List-Price" class="form-floating mb-3 col-sm">
              <input type="Price" class="form-control" id="List_Price" placeholder="name@example.com">
              <label for="List_Price">Per Carbon Unit Price (MATIC)</label>
          </div>
          </div>
          <div class="text-center">
            <button id="List" class="btn btn-primary" type="button" onclick="List();">List</button>
          </div> -->
          <div class="row g-2 align-items-center">
            <div id="List-TokenID" class="form-floating mb-3 col-sm">
              <input type="text" class="form-control" id="List_TokenID" placeholder="name@example.com">
              <label for="List_TokenID">Token ID</label>
            </div>
            <div id="List-Price" class="form-floating mb-3 col-sm">
              <input type="text" class="form-control" id="List_Price" placeholder="name@example.com">
              <label for="List_Price">Per Carbon Unit Price (MATIC)</label>
            </div>
            <div class="col-auto">
              <button id="List" class="btn btn-primary" type="button" onclick="List();"> List </button>
            </div>
          </div>
          
          <div style="display: flex;justify-content: center;">
            <div id="MyNFTTableContainer" style="margin-top: 5px;display: none;" class="table-container"></div>
          </div>
        </div>
        <div id="Payment" style="display: none;">
          <h2 style="text-align: center;">Pay Matching Result</h2>
          <div class="row g-1">
            <div id="Payment-TokenID" class="form-floating mb-3 col-sm">
                <input type="TokenID" class="form-control" id="Pay_TokenID" placeholder="name@example.com">
                <label for="Pay_TokenID">Token ID</label>
            </div>
          </div>
          <div class="d-grid gap-2">
            <button id="Pay" class="btn btn-primary" type="button" onclick="Pay();">Pay</button>
          </div>
          <div style="display: flex;justify-content: center;">
            <div id="MatchingTableContainer" style="margin-top: 5px;display: none;" class="table-container"></div>
          </div>
        </div>
      </div>
    </div>
  </body>
</html>
<script>
var web3 ='';
if (window.ethereum) {
  web3 = new Web3(window.ethereum);
  window.ethereum.enable(); // get permission to access accounts
  } 
</script>
<script>
  function changePage(open,close){
        console.log(open);
        const openAim = open.split(",");
        const closeAim = close.split(",");
        for(i=0;i<openAim.length;i++){
            $("#"+openAim[i]).show();
        }
        for(i=0;i<closeAim.length;i++){
            $("#"+closeAim[i]).hide();
        }
    }
    async function Refresh(){
    try{
      document.getElementById("Refresh").disabled=true;
            if (window.ethereum) {
                await window.ethereum.request({ method: 'eth_requestAccounts' });
                const accounts = await window.ethereum.request({ method: 'eth_accounts' });;
                var account = accounts[0];
                await $.ajax({
                  type: "GET",
                  url: "http://140.116.234.100:1314/trading/Market/DemandList",              
                  success: function (data) {
                    document.getElementById('TrackingDemandTableContainer').innerHTML='';
                    const table = document.createElement('table');
                    const thead = document.createElement('thead');
                    const tbody = document.createElement('tbody');
                    table.appendChild(thead);
                    table.appendChild(tbody);
                    // Adding some basic styling to the table (optional)
                    /*table.style.width = '100%';
                    table.style.borderCollapse = 'collapse';*/

                    // Create header row
                    const headerRow = document.createElement('tr');
                    console.log(data)
                    if (data.length > 0) {
                        Object.keys(data[0]).forEach(key => {
                            console.log(key);
                            const th = document.createElement('th');
                            th.textContent = key;
                            th.style.border = '1px solid black';
                            th.style.padding = '8px';
                            th.style.backgroundColor = '#f2f2f2';
                            headerRow.appendChild(th);
                        });
                        thead.appendChild(headerRow);
                        data.forEach(item => {
                        const tr = document.createElement('tr');
                        Object.values(item).forEach(value => {
                            const td = document.createElement('td');
                            td.textContent = value;
                            td.style.border = '1px solid black';
                            td.style.padding = '8px';
                            tr.appendChild(td);
                        });
                        tbody.appendChild(tr);
                        });
                    }
                    else{
                      const th = document.createElement('th');
                            th.textContent = 'No Demand';
                            th.style.border = '1px solid black';
                            th.style.padding = '8px';
                            th.style.backgroundColor = '#f2f2f2';
                            headerRow.appendChild(th);
                            thead.appendChild(headerRow);
                      const tr = document.createElement('tr');
                      const td = document.createElement('td');
                            td.textContent = 'No Demand';
                            td.style.border = '1px solid black';
                            td.style.padding = '8px';
                            tr.appendChild(td);
                            tbody.appendChild(tr);  
                    }

                    // Append the table to the container
                    document.getElementById('TrackingDemandTableContainer').appendChild(table);
                    $("#Demand").show();
                    $("#TrackingDemandTableContainer").show();
                  },
                  error: function (err) {
                    alert(err)
                    document.getElementById("Refresh").disabled=false;
                  }            
              });
              await $.ajax({
                  type: "GET",
                  url: "http://140.116.234.100:1314/trading/Market/SupplyList",              
                  success: function (data) {
                    document.getElementById('TrackingSupplyTableContainer').innerHTML='';
                    const table = document.createElement('table');
                    const thead = document.createElement('thead');
                    const tbody = document.createElement('tbody');
                    table.appendChild(thead);
                    table.appendChild(tbody);
                    // Adding some basic styling to the table (optional)
                    /*table.style.width = '100%';
                    table.style.borderCollapse = 'collapse';*/

                    // Create header row
                    const headerRow = document.createElement('tr');
                    console.log(data)
                    if (data.length > 0) {
                        Object.keys(data[0]).forEach(key => {
                            console.log(key);
                            const th = document.createElement('th');
                            th.textContent = key;
                            th.style.border = '1px solid black';
                            th.style.padding = '8px';
                            th.style.backgroundColor = '#f2f2f2';
                            headerRow.appendChild(th);
                        });
                        thead.appendChild(headerRow);
                        data.forEach(item => {
                        const tr = document.createElement('tr');
                        Object.values(item).forEach(value => {
                            const td = document.createElement('td');
                            td.textContent = value;
                            td.style.border = '1px solid black';
                            td.style.padding = '8px';
                            tr.appendChild(td);
                        });
                        tbody.appendChild(tr);
                        });
                    }
                    else{
                      const th = document.createElement('th');
                            th.textContent = 'No Supply';
                            th.style.border = '1px solid black';
                            th.style.padding = '8px';
                            th.style.backgroundColor = '#f2f2f2';
                            headerRow.appendChild(th);
                            thead.appendChild(headerRow);
                      const tr = document.createElement('tr');
                      const td = document.createElement('td');
                            td.textContent = 'No Supply';
                            td.style.border = '1px solid black';
                            td.style.padding = '8px';
                            tr.appendChild(td);
                            tbody.appendChild(tr);  
                    }

                    // Append the table to the container
                    document.getElementById('TrackingSupplyTableContainer').appendChild(table);
                    $("#Supply").show();
                    $("#TrackingSupplyTableContainer").show();
                  },
                  error: function (err) {
                    alert(err)
                    document.getElementById("Refresh").disabled=false;
                  }            
              });
              document.getElementById("Refresh").disabled=false;
                }
            else {
                alert('you need install metamask');
                document.getElementById("Refresh").disabled=false;
            }
          }
        catch(err){
          alert(err);
          document.getElementById("Refresh").disabled=false;
        }
  }
  async function getYourNFT(){
    try{
            if (window.ethereum) {
                await window.ethereum.request({ method: 'eth_requestAccounts' });
                const accounts = await window.ethereum.request({ method: 'eth_accounts' });;
                var account = accounts[0];
                await $.ajax({
                  type: "GET",
                  url: "http://140.116.234.100:1314/trading/iMRCNFT/YourNFTList?Address="+account,              
                  success: function (data) {
                    document.getElementById('MyNFTTableContainer').innerHTML='';
                    const table = document.createElement('table');
                    const thead = document.createElement('thead');
                    const tbody = document.createElement('tbody');
                    table.appendChild(thead);
                    table.appendChild(tbody);
                    // Adding some basic styling to the table (optional)
                    /*table.style.width = '100%';
                    table.style.borderCollapse = 'collapse';*/

                    // Create header row
                    const headerRow = document.createElement('tr');
                    console.log(data)
                    if (data.length > 1) {
                        Object.keys(data[0]).forEach(key => {
                            console.log(key);
                            const th = document.createElement('th');
                            th.textContent = key;
                            th.style.border = '1px solid black';
                            th.style.padding = '8px';
                            th.style.backgroundColor = '#f2f2f2';
                            headerRow.appendChild(th);
                        });
                        thead.appendChild(headerRow);
                        data.forEach(item => {
                        const tr = document.createElement('tr');
                        Object.values(item).forEach(value => {
                            const td = document.createElement('td');
                            td.textContent = value;
                            td.style.border = '1px solid black';
                            td.style.padding = '8px';
                            tr.appendChild(td);
                        });
                        tbody.appendChild(tr);
                        });
                    }
                    else{
                        Object.keys(data[0]).forEach(key => {
                            const th = document.createElement('th');
                            th.textContent = key;
                            th.style.border = '1px solid black';
                            th.style.padding = '8px';
                            th.style.backgroundColor = '#f2f2f2';
                            headerRow.appendChild(th);
                        });
                        thead.appendChild(headerRow);
                        const tr = document.createElement('tr');
                        Object.values(data[0]).forEach(value => {
                            const td = document.createElement('td');
                            td.textContent = value;
                            td.style.border = '1px solid black';
                            td.style.padding = '8px';
                            tr.appendChild(td);
                        });
                        tbody.appendChild(tr);
                    }

                    // Append the table to the container
                    document.getElementById('MyNFTTableContainer').appendChild(table);
                    $("#MyNFTTableContainer").show();
                  },
                  error: function (err) {
                  }            
              });
                }
            else {
                alert('you need install metamask');
            }
          }
        catch(err){
          alert(err);
        }
  }
  async function List(){
    try{
        document.getElementById("List").disabled= true;
        if (window.ethereum) {
          await window.ethereum.request({ method: 'eth_requestAccounts' });
          const accounts = await window.ethereum.request({ method: 'eth_accounts' });;
          var account = accounts[0];
          const TokenID = document.getElementById("List_TokenID").value;
          let Price = document.getElementById("List_Price").value;
          Price = Price*(10**18);
          await $.ajax({
            type: "GET",
            url: "/trading/Contracts?Contract=iMRCNFTContract",             
            success: async function (data) {
              const iMRCNFTContract = new web3.eth.Contract(data[1].abi,data[0]);             
              const response = await iMRCNFTContract.methods.Market(TokenID,Price).send({ from: account });
              alert('NFT List Success,Transaction Hash :'+response.transactionHash);
              //document.getElementById("List").disabled=false;
            },
            error: function (err) {
              alert(err.toString())
              document.getElementById("List").disabled=false;
            }            
        });
        }
        else {
          alert('you need install metamask');
          document.getElementById("List").disabled=false;
        }
        //document.getElementById("List").disabled=false;
    }
    catch(err){
      alert(err.toString());
      document.getElementById("List").disabled=false;
    }
  }
  async function Matching(){
    try{
        document.getElementById("Matching").disabled=true;
        if (window.ethereum) {
          await window.ethereum.request({ method: 'eth_requestAccounts' });
          const accounts = await window.ethereum.request({ method: 'eth_accounts' });;
          var account = accounts[0];
          await $.ajax({
            type: "GET",
            url: "/trading/Contracts?Contract=MarketContract",             
            success: async function (data) {
              const MarketContract = new web3.eth.Contract(data[1].abi,data[0]);
              const response = await MarketContract.methods.Matching().send({ from: account });
              console.log(response.transactionHash);
              document.getElementById("Matching").disabled=false;
            },
            error: function (err) {
              alert(err)
              document.getElementById("Matching").disabled=false;
            }            
        });
        }
        else {
          alert('you need install metamask');
          document.getElementById("Matching").disabled=false;
        }
        document.getElementById("Matching").disabled=false;
    }
    catch(err){
      alert(err);
      document.getElementById("Matching").disabled=false;
    }
  }
  async function Remaining(){
    try{
      document.getElementById("Pay").disabled=true;
            if (window.ethereum) {
                await window.ethereum.request({ method: 'eth_requestAccounts' });
                const accounts = await window.ethereum.request({ method: 'eth_accounts' });;
                var account = accounts[0];
                await $.ajax({
                  type: "GET",
                  url: "http://140.116.234.100:1314/trading/Market/UnFinishMatchingList",              
                  success: function (data) {
                    document.getElementById('MatchingTableContainer').innerHTML='';
                    const table = document.createElement('table');
                    const thead = document.createElement('thead');
                    const tbody = document.createElement('tbody');
                    table.appendChild(thead);
                    table.appendChild(tbody);
                    // Adding some basic styling to the table (optional)
                    /*table.style.width = '100%';
                    table.style.borderCollapse = 'collapse';*/

                    // Create header row
                    const headerRow = document.createElement('tr');
                    console.log(data)
                    if (data.length > 0) {
                        Object.keys(data[0]).forEach(key => {
                            console.log(key);
                            const th = document.createElement('th');
                            th.textContent = key;
                            th.style.border = '1px solid black';
                            th.style.padding = '8px';
                            th.style.backgroundColor = '#f2f2f2';
                            headerRow.appendChild(th);
                        });
                        thead.appendChild(headerRow);
                        data.forEach(item => {
                        const tr = document.createElement('tr');
                        Object.values(item).forEach(value => {
                            const td = document.createElement('td');
                            td.textContent = value;
                            td.style.border = '1px solid black';
                            td.style.padding = '8px';
                            tr.appendChild(td);
                        });
                        tbody.appendChild(tr);
                        });
                    }
                    else{
                      const th = document.createElement('th');
                            th.textContent = 'No Unpaid Matching';
                            th.style.border = '1px solid black';
                            th.style.padding = '8px';
                            th.style.backgroundColor = '#f2f2f2';
                            headerRow.appendChild(th);
                            thead.appendChild(headerRow);
                      const tr = document.createElement('tr');
                      const td = document.createElement('td');
                            td.textContent = 'No Unpaid Matching';
                            td.style.border = '1px solid black';
                            td.style.padding = '8px';
                            tr.appendChild(td);
                            tbody.appendChild(tr);  
                    }

                    // Append the table to the container
                    document.getElementById('MatchingTableContainer').appendChild(table);
                    $("#Demand").show();
                    $("#MatchingTableContainer").show();
                  },
                  error: function (err) {
                    alert(err)
                    document.getElementById("Pay").disabled=false;
                  }            
              });
              document.getElementById("Pay").disabled=false;
                }
            else {
                alert('you need install metamask');
                document.getElementById("Pay").disabled=false;
            }
          }
        catch(err){
          alert(err);
          document.getElementById("Pay").disabled=false;
        }
  }
  async function Pay(){
    try{
        document.getElementById("Pay").disabled=true;
        if (window.ethereum) {
          await window.ethereum.request({ method: 'eth_requestAccounts' });
          const accounts = await window.ethereum.request({ method: 'eth_accounts' });;
          var account = accounts[0];
          const TokenID = document.getElementById("Pay_TokenID").value;
          await $.ajax({
            type: "GET",
            url: "/trading/Contracts?Contract=MarketContract",             
            success: async function (data) {
              const MarketContract = new web3.eth.Contract(data[1].abi,data[0]);
              await $.ajax({
                  type: "GET",
                  url: "http://140.116.234.100:1314/trading/Market/UnFinishMatchingList",             
                  success: async function (data) {
                    for(let i=0;i<data.length;i++){
                      if(data[i].BuyerNFTID==TokenID.toString()){
                        let Price = data[i].Amount*data[i].Price*(10**18);
                        await MarketContract.methods.Payment(TokenID).send({ from: account,value: Price});
                      }
                    }
                    document.getElementById("Pay").disabled=false;
                  },
                  error: function (err) {
                    alert(err)
                    document.getElementById("Pay").disabled=false;
                  }            
              });
            },
            error: function (err) {
              alert(err)
              document.getElementById("Pay").disabled=false;
            }            
        });
        }
        else {
          alert('you need install metamask');
          document.getElementById("Pay").disabled=false;
        }
        document.getElementById("Pay").disabled=false;
    }
    catch(err){
      alert(err);
      document.getElementById("Pay").disabled=false;
    }
  }
  window.onload=reloading();
  function reloading(){
        Refresh();
      }
</script>

